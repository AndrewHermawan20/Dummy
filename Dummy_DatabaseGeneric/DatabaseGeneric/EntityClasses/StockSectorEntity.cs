//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using Dummy.HelperClasses;
using Dummy.FactoryClasses;
using Dummy.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace Dummy.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END

	/// <summary>Entity class which represents the entity 'StockSector'.<br/><br/></summary>
	[Serializable]
	public partial class StockSectorEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END
	
	{
		private EntityCollection<StockEntity> _stocks;
		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END

		private static StockSectorEntityStaticMetaData _staticMetaData = new StockSectorEntityStaticMetaData();
		private static StockSectorRelations _relationsFactory = new StockSectorRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Stocks</summary>
			public static readonly string Stocks = "Stocks";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class StockSectorEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public StockSectorEntityStaticMetaData()
			{
				SetEntityCoreInfo("StockSectorEntity", InheritanceHierarchyType.None, false, (int)Dummy.EntityType.StockSectorEntity, typeof(StockSectorEntity), typeof(StockSectorEntityFactory), false);
				AddNavigatorMetaData<StockSectorEntity, EntityCollection<StockEntity>>("Stocks", a => a._stocks, (a, b) => a._stocks = b, a => a.Stocks, () => new StockSectorRelations().StockEntityUsingStockSectorId, typeof(StockEntity), (int)Dummy.EntityType.StockEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static StockSectorEntity()
		{
		}

		/// <summary> CTor</summary>
		public StockSectorEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public StockSectorEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this StockSectorEntity</param>
		public StockSectorEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="stockSectorId">PK value for StockSector which data should be fetched into this StockSector object</param>
		public StockSectorEntity(System.Int32 stockSectorId) : this(stockSectorId, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="stockSectorId">PK value for StockSector which data should be fetched into this StockSector object</param>
		/// <param name="validator">The custom validator object for this StockSectorEntity</param>
		public StockSectorEntity(System.Int32 stockSectorId, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.StockSectorId = stockSectorId;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected StockSectorEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Stock' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoStocks() { return CreateRelationInfoForNavigator("Stocks"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this StockSectorEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END


			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static StockSectorRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Stock' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathStocks { get { return _staticMetaData.GetPrefetchPathElement("Stocks", CommonEntityBase.CreateEntityCollection<StockEntity>()); } }

		/// <summary>The Code property of the Entity StockSector<br/><br/></summary>
		/// <remarks>Mapped on  table field: "StockSector"."Code".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 50.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Code
		{
			get { return (System.String)GetValue((int)StockSectorFieldIndex.Code, true); }
			set	{ SetValue((int)StockSectorFieldIndex.Code, value); }
		}

		/// <summary>The CreateDate property of the Entity StockSector<br/><br/></summary>
		/// <remarks>Mapped on  table field: "StockSector"."CreateDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime2, 7, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime CreateDate
		{
			get { return (System.DateTime)GetValue((int)StockSectorFieldIndex.CreateDate, true); }
			set	{ SetValue((int)StockSectorFieldIndex.CreateDate, value); }
		}

		/// <summary>The Name property of the Entity StockSector<br/><br/></summary>
		/// <remarks>Mapped on  table field: "StockSector"."Name".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 100.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Name
		{
			get { return (System.String)GetValue((int)StockSectorFieldIndex.Name, true); }
			set	{ SetValue((int)StockSectorFieldIndex.Name, value); }
		}

		/// <summary>The StockSectorId property of the Entity StockSector<br/><br/></summary>
		/// <remarks>Mapped on  table field: "StockSector"."StockSectorId".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 StockSectorId
		{
			get { return (System.Int32)GetValue((int)StockSectorFieldIndex.StockSectorId, true); }
			set { SetValue((int)StockSectorFieldIndex.StockSectorId, value); }		}

		/// <summary>The UpdateDate property of the Entity StockSector<br/><br/></summary>
		/// <remarks>Mapped on  table field: "StockSector"."UpdateDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime2, 7, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime UpdateDate
		{
			get { return (System.DateTime)GetValue((int)StockSectorFieldIndex.UpdateDate, true); }
			set	{ SetValue((int)StockSectorFieldIndex.UpdateDate, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'StockEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(StockEntity))]
		public virtual EntityCollection<StockEntity> Stocks { get { return GetOrCreateEntityCollection<StockEntity, StockEntityFactory>("StockSector", true, false, ref _stocks); } }
		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END


	}
}

namespace Dummy
{
	public enum StockSectorFieldIndex
	{
		///<summary>Code. </summary>
		Code,
		///<summary>CreateDate. </summary>
		CreateDate,
		///<summary>Name. </summary>
		Name,
		///<summary>StockSectorId. </summary>
		StockSectorId,
		///<summary>UpdateDate. </summary>
		UpdateDate,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace Dummy.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: StockSector. </summary>
	public partial class StockSectorRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between StockSectorEntity and StockEntity over the 1:n relation they have, using the relation between the fields: StockSector.StockSectorId - Stock.StockSectorId</summary>
		public virtual IEntityRelation StockEntityUsingStockSectorId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Stocks", true, new[] { StockSectorFields.StockSectorId, StockFields.StockSectorId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticStockSectorRelations
	{
		internal static readonly IEntityRelation StockEntityUsingStockSectorIdStatic = new StockSectorRelations().StockEntityUsingStockSectorId;

		/// <summary>CTor</summary>
		static StaticStockSectorRelations() { }
	}
}
