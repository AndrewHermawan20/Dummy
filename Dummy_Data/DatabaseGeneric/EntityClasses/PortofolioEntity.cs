//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using Dummy.HelperClasses;
using Dummy.FactoryClasses;
using Dummy.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace Dummy.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'Portofolio'.<br/><br/></summary>
	[Serializable]
	public partial class PortofolioEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private EntityCollection<PortofolioItemEntity> _portofolioItems;
		private UserEntity _user;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static PortofolioEntityStaticMetaData _staticMetaData = new PortofolioEntityStaticMetaData();
		private static PortofolioRelations _relationsFactory = new PortofolioRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name User</summary>
			public static readonly string User = "User";
			/// <summary>Member name PortofolioItems</summary>
			public static readonly string PortofolioItems = "PortofolioItems";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class PortofolioEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public PortofolioEntityStaticMetaData()
			{
				SetEntityCoreInfo("PortofolioEntity", InheritanceHierarchyType.None, false, (int)Dummy.EntityType.PortofolioEntity, typeof(PortofolioEntity), typeof(PortofolioEntityFactory), false);
				AddNavigatorMetaData<PortofolioEntity, EntityCollection<PortofolioItemEntity>>("PortofolioItems", a => a._portofolioItems, (a, b) => a._portofolioItems = b, a => a.PortofolioItems, () => new PortofolioRelations().PortofolioItemEntityUsingPortofolioId, typeof(PortofolioItemEntity), (int)Dummy.EntityType.PortofolioItemEntity);
				AddNavigatorMetaData<PortofolioEntity, UserEntity>("User", "Portofolios", (a, b) => a._user = b, a => a._user, (a, b) => a.User = b, Dummy.RelationClasses.StaticPortofolioRelations.UserEntityUsingUserIdStatic, ()=>new PortofolioRelations().UserEntityUsingUserId, null, new int[] { (int)PortofolioFieldIndex.UserId }, null, true, (int)Dummy.EntityType.UserEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static PortofolioEntity()
		{
		}

		/// <summary> CTor</summary>
		public PortofolioEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public PortofolioEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this PortofolioEntity</param>
		public PortofolioEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="portofolioId">PK value for Portofolio which data should be fetched into this Portofolio object</param>
		public PortofolioEntity(System.Int32 portofolioId) : this(portofolioId, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="portofolioId">PK value for Portofolio which data should be fetched into this Portofolio object</param>
		/// <param name="validator">The custom validator object for this PortofolioEntity</param>
		public PortofolioEntity(System.Int32 portofolioId, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.PortofolioId = portofolioId;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected PortofolioEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'PortofolioItem' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoPortofolioItems() { return CreateRelationInfoForNavigator("PortofolioItems"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'User' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoUser() { return CreateRelationInfoForNavigator("User"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this PortofolioEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static PortofolioRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'PortofolioItem' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathPortofolioItems { get { return _staticMetaData.GetPrefetchPathElement("PortofolioItems", CommonEntityBase.CreateEntityCollection<PortofolioItemEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'User' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathUser { get { return _staticMetaData.GetPrefetchPathElement("User", CommonEntityBase.CreateEntityCollection<UserEntity>()); } }

		/// <summary>The Cash property of the Entity Portofolio<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Portofolio"."Cash".<br/>Table field type characteristics (type, precision, scale, length): Money, 19, 4, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Decimal Cash
		{
			get { return (System.Decimal)GetValue((int)PortofolioFieldIndex.Cash, true); }
			set	{ SetValue((int)PortofolioFieldIndex.Cash, value); }
		}

		/// <summary>The CreateDate property of the Entity Portofolio<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Portofolio"."CreateDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime2, 7, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime CreateDate
		{
			get { return (System.DateTime)GetValue((int)PortofolioFieldIndex.CreateDate, true); }
			set	{ SetValue((int)PortofolioFieldIndex.CreateDate, value); }
		}

		/// <summary>The PortofolioId property of the Entity Portofolio<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Portofolio"."PortofolioId".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.Int32 PortofolioId
		{
			get { return (System.Int32)GetValue((int)PortofolioFieldIndex.PortofolioId, true); }
			set	{ SetValue((int)PortofolioFieldIndex.PortofolioId, value); }
		}

		/// <summary>The UpdateDate property of the Entity Portofolio<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Portofolio"."UpdateDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime2, 7, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime UpdateDate
		{
			get { return (System.DateTime)GetValue((int)PortofolioFieldIndex.UpdateDate, true); }
			set	{ SetValue((int)PortofolioFieldIndex.UpdateDate, value); }
		}

		/// <summary>The UserId property of the Entity Portofolio<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Portofolio"."UserId".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 UserId
		{
			get { return (System.Int32)GetValue((int)PortofolioFieldIndex.UserId, true); }
		}

		/// <summary>The Value property of the Entity Portofolio<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Portofolio"."Value".<br/>Table field type characteristics (type, precision, scale, length): Money, 19, 4, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Decimal Value
		{
			get { return (System.Decimal)GetValue((int)PortofolioFieldIndex.Value, true); }
			set	{ SetValue((int)PortofolioFieldIndex.Value, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'PortofolioItemEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(PortofolioItemEntity))]
		public virtual EntityCollection<PortofolioItemEntity> PortofolioItems { get { return GetOrCreateEntityCollection<PortofolioItemEntity, PortofolioItemEntityFactory>("Portofolio", true, false, ref _portofolioItems); } }

		/// <summary>Gets / sets related entity of type 'UserEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual UserEntity User
		{
			get { return _user; }
			set { SetSingleRelatedEntityNavigator(value, "User"); }
		}

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace Dummy
{
	public enum PortofolioFieldIndex
	{
		///<summary>Cash. </summary>
		Cash,
		///<summary>CreateDate. </summary>
		CreateDate,
		///<summary>PortofolioId. </summary>
		PortofolioId,
		///<summary>UpdateDate. </summary>
		UpdateDate,
		///<summary>UserId. </summary>
		UserId,
		///<summary>Value. </summary>
		Value,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace Dummy.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: Portofolio. </summary>
	public partial class PortofolioRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between PortofolioEntity and PortofolioItemEntity over the 1:n relation they have, using the relation between the fields: Portofolio.PortofolioId - PortofolioItem.PortofolioId</summary>
		public virtual IEntityRelation PortofolioItemEntityUsingPortofolioId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "PortofolioItems", true, new[] { PortofolioFields.PortofolioId, PortofolioItemFields.PortofolioId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between PortofolioEntity and UserEntity over the m:1 relation they have, using the relation between the fields: Portofolio.UserId - User.UserId</summary>
		public virtual IEntityRelation UserEntityUsingUserId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "User", false, new[] { UserFields.UserId, PortofolioFields.UserId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticPortofolioRelations
	{
		internal static readonly IEntityRelation PortofolioItemEntityUsingPortofolioIdStatic = new PortofolioRelations().PortofolioItemEntityUsingPortofolioId;
		internal static readonly IEntityRelation UserEntityUsingUserIdStatic = new PortofolioRelations().UserEntityUsingUserId;

		/// <summary>CTor</summary>
		static StaticPortofolioRelations() { }
	}
}
