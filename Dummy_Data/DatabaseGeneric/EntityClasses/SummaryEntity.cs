//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using Dummy.HelperClasses;
using Dummy.FactoryClasses;
using Dummy.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace Dummy.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'Summary'.<br/><br/></summary>
	[Serializable]
	public partial class SummaryEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private UserEntity _user;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static SummaryEntityStaticMetaData _staticMetaData = new SummaryEntityStaticMetaData();
		private static SummaryRelations _relationsFactory = new SummaryRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name User</summary>
			public static readonly string User = "User";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class SummaryEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public SummaryEntityStaticMetaData()
			{
				SetEntityCoreInfo("SummaryEntity", InheritanceHierarchyType.None, false, (int)Dummy.EntityType.SummaryEntity, typeof(SummaryEntity), typeof(SummaryEntityFactory), false);
				AddNavigatorMetaData<SummaryEntity, UserEntity>("User", "Summaries", (a, b) => a._user = b, a => a._user, (a, b) => a.User = b, Dummy.RelationClasses.StaticSummaryRelations.UserEntityUsingUserIdStatic, ()=>new SummaryRelations().UserEntityUsingUserId, null, new int[] { (int)SummaryFieldIndex.UserId }, null, true, (int)Dummy.EntityType.UserEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static SummaryEntity()
		{
		}

		/// <summary> CTor</summary>
		public SummaryEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public SummaryEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this SummaryEntity</param>
		public SummaryEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="summaryId">PK value for Summary which data should be fetched into this Summary object</param>
		public SummaryEntity(System.Int64 summaryId) : this(summaryId, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="summaryId">PK value for Summary which data should be fetched into this Summary object</param>
		/// <param name="validator">The custom validator object for this SummaryEntity</param>
		public SummaryEntity(System.Int64 summaryId, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.SummaryId = summaryId;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected SummaryEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'User' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoUser() { return CreateRelationInfoForNavigator("User"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this SummaryEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static SummaryRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'User' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathUser { get { return _staticMetaData.GetPrefetchPathElement("User", CommonEntityBase.CreateEntityCollection<UserEntity>()); } }

		/// <summary>The AdjustmentCurrentCash property of the Entity Summary<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Summary"."AdjustmentCurrentCash".<br/>Table field type characteristics (type, precision, scale, length): Money, 19, 4, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Decimal> AdjustmentCurrentCash
		{
			get { return (Nullable<System.Decimal>)GetValue((int)SummaryFieldIndex.AdjustmentCurrentCash, false); }
			set	{ SetValue((int)SummaryFieldIndex.AdjustmentCurrentCash, value); }
		}

		/// <summary>The CapitalGain property of the Entity Summary<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Summary"."CapitalGain".<br/>Table field type characteristics (type, precision, scale, length): Money, 19, 4, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Decimal> CapitalGain
		{
			get { return (Nullable<System.Decimal>)GetValue((int)SummaryFieldIndex.CapitalGain, false); }
			set	{ SetValue((int)SummaryFieldIndex.CapitalGain, value); }
		}

		/// <summary>The CapitalLoss property of the Entity Summary<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Summary"."CapitalLoss".<br/>Table field type characteristics (type, precision, scale, length): Money, 19, 4, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Decimal> CapitalLoss
		{
			get { return (Nullable<System.Decimal>)GetValue((int)SummaryFieldIndex.CapitalLoss, false); }
			set	{ SetValue((int)SummaryFieldIndex.CapitalLoss, value); }
		}

		/// <summary>The CreateDate property of the Entity Summary<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Summary"."CreateDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime2, 7, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime CreateDate
		{
			get { return (System.DateTime)GetValue((int)SummaryFieldIndex.CreateDate, true); }
			set	{ SetValue((int)SummaryFieldIndex.CreateDate, value); }
		}

		/// <summary>The CurrentCash property of the Entity Summary<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Summary"."CurrentCash".<br/>Table field type characteristics (type, precision, scale, length): Money, 19, 4, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Decimal> CurrentCash
		{
			get { return (Nullable<System.Decimal>)GetValue((int)SummaryFieldIndex.CurrentCash, false); }
			set	{ SetValue((int)SummaryFieldIndex.CurrentCash, value); }
		}

		/// <summary>The Deviden property of the Entity Summary<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Summary"."Deviden".<br/>Table field type characteristics (type, precision, scale, length): Money, 19, 4, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Decimal> Deviden
		{
			get { return (Nullable<System.Decimal>)GetValue((int)SummaryFieldIndex.Deviden, false); }
			set	{ SetValue((int)SummaryFieldIndex.Deviden, value); }
		}

		/// <summary>The LoanInterest property of the Entity Summary<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Summary"."LoanInterest".<br/>Table field type characteristics (type, precision, scale, length): Money, 19, 4, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Decimal> LoanInterest
		{
			get { return (Nullable<System.Decimal>)GetValue((int)SummaryFieldIndex.LoanInterest, false); }
			set	{ SetValue((int)SummaryFieldIndex.LoanInterest, value); }
		}

		/// <summary>The MateraiFee property of the Entity Summary<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Summary"."MateraiFee".<br/>Table field type characteristics (type, precision, scale, length): Money, 19, 4, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Decimal> MateraiFee
		{
			get { return (Nullable<System.Decimal>)GetValue((int)SummaryFieldIndex.MateraiFee, false); }
			set	{ SetValue((int)SummaryFieldIndex.MateraiFee, value); }
		}

		/// <summary>The SummaryDate property of the Entity Summary<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Summary"."SummaryDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime2, 7, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime SummaryDate
		{
			get { return (System.DateTime)GetValue((int)SummaryFieldIndex.SummaryDate, true); }
			set	{ SetValue((int)SummaryFieldIndex.SummaryDate, value); }
		}

		/// <summary>The SummaryId property of the Entity Summary<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Summary"."SummaryId".<br/>Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int64 SummaryId
		{
			get { return (System.Int64)GetValue((int)SummaryFieldIndex.SummaryId, true); }
			set { SetValue((int)SummaryFieldIndex.SummaryId, value); }		}

		/// <summary>The TotalBuyNetAmount property of the Entity Summary<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Summary"."TotalBuyNetAmount".<br/>Table field type characteristics (type, precision, scale, length): Money, 19, 4, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Decimal> TotalBuyNetAmount
		{
			get { return (Nullable<System.Decimal>)GetValue((int)SummaryFieldIndex.TotalBuyNetAmount, false); }
			set	{ SetValue((int)SummaryFieldIndex.TotalBuyNetAmount, value); }
		}

		/// <summary>The TotalSellNetAmount property of the Entity Summary<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Summary"."TotalSellNetAmount".<br/>Table field type characteristics (type, precision, scale, length): Money, 19, 4, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Decimal> TotalSellNetAmount
		{
			get { return (Nullable<System.Decimal>)GetValue((int)SummaryFieldIndex.TotalSellNetAmount, false); }
			set	{ SetValue((int)SummaryFieldIndex.TotalSellNetAmount, value); }
		}

		/// <summary>The Transfer property of the Entity Summary<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Summary"."Transfer".<br/>Table field type characteristics (type, precision, scale, length): Money, 19, 4, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Decimal> Transfer
		{
			get { return (Nullable<System.Decimal>)GetValue((int)SummaryFieldIndex.Transfer, false); }
			set	{ SetValue((int)SummaryFieldIndex.Transfer, value); }
		}

		/// <summary>The UpdateDate property of the Entity Summary<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Summary"."UpdateDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime2, 7, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime UpdateDate
		{
			get { return (System.DateTime)GetValue((int)SummaryFieldIndex.UpdateDate, true); }
			set	{ SetValue((int)SummaryFieldIndex.UpdateDate, value); }
		}

		/// <summary>The UserId property of the Entity Summary<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Summary"."UserId".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 UserId
		{
			get { return (System.Int32)GetValue((int)SummaryFieldIndex.UserId, true); }
			set	{ SetValue((int)SummaryFieldIndex.UserId, value); }
		}

		/// <summary>The Version property of the Entity Summary<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Summary"."Version".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 Version
		{
			get { return (System.Int32)GetValue((int)SummaryFieldIndex.Version, true); }
			set	{ SetValue((int)SummaryFieldIndex.Version, value); }
		}

		/// <summary>The Withdraw property of the Entity Summary<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Summary"."Withdraw".<br/>Table field type characteristics (type, precision, scale, length): Money, 19, 4, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Decimal> Withdraw
		{
			get { return (Nullable<System.Decimal>)GetValue((int)SummaryFieldIndex.Withdraw, false); }
			set	{ SetValue((int)SummaryFieldIndex.Withdraw, value); }
		}

		/// <summary>Gets / sets related entity of type 'UserEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual UserEntity User
		{
			get { return _user; }
			set { SetSingleRelatedEntityNavigator(value, "User"); }
		}

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace Dummy
{
	public enum SummaryFieldIndex
	{
		///<summary>AdjustmentCurrentCash. </summary>
		AdjustmentCurrentCash,
		///<summary>CapitalGain. </summary>
		CapitalGain,
		///<summary>CapitalLoss. </summary>
		CapitalLoss,
		///<summary>CreateDate. </summary>
		CreateDate,
		///<summary>CurrentCash. </summary>
		CurrentCash,
		///<summary>Deviden. </summary>
		Deviden,
		///<summary>LoanInterest. </summary>
		LoanInterest,
		///<summary>MateraiFee. </summary>
		MateraiFee,
		///<summary>SummaryDate. </summary>
		SummaryDate,
		///<summary>SummaryId. </summary>
		SummaryId,
		///<summary>TotalBuyNetAmount. </summary>
		TotalBuyNetAmount,
		///<summary>TotalSellNetAmount. </summary>
		TotalSellNetAmount,
		///<summary>Transfer. </summary>
		Transfer,
		///<summary>UpdateDate. </summary>
		UpdateDate,
		///<summary>UserId. </summary>
		UserId,
		///<summary>Version. </summary>
		Version,
		///<summary>Withdraw. </summary>
		Withdraw,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace Dummy.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: Summary. </summary>
	public partial class SummaryRelations: RelationFactory
	{

		/// <summary>Returns a new IEntityRelation object, between SummaryEntity and UserEntity over the m:1 relation they have, using the relation between the fields: Summary.UserId - User.UserId</summary>
		public virtual IEntityRelation UserEntityUsingUserId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "User", false, new[] { UserFields.UserId, SummaryFields.UserId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticSummaryRelations
	{
		internal static readonly IEntityRelation UserEntityUsingUserIdStatic = new SummaryRelations().UserEntityUsingUserId;

		/// <summary>CTor</summary>
		static StaticSummaryRelations() { }
	}
}
