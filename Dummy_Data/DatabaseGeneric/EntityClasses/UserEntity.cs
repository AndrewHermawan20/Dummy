//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using Dummy.HelperClasses;
using Dummy.FactoryClasses;
using Dummy.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace Dummy.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'User'.<br/><br/></summary>
	[Serializable]
	public partial class UserEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private EntityCollection<PortofolioEntity> _portofolios;
		private EntityCollection<SummaryEntity> _summaries;
		private EntityCollection<TransactionEntity> _transactions;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static UserEntityStaticMetaData _staticMetaData = new UserEntityStaticMetaData();
		private static UserRelations _relationsFactory = new UserRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Portofolios</summary>
			public static readonly string Portofolios = "Portofolios";
			/// <summary>Member name Summaries</summary>
			public static readonly string Summaries = "Summaries";
			/// <summary>Member name Transactions</summary>
			public static readonly string Transactions = "Transactions";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class UserEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public UserEntityStaticMetaData()
			{
				SetEntityCoreInfo("UserEntity", InheritanceHierarchyType.None, false, (int)Dummy.EntityType.UserEntity, typeof(UserEntity), typeof(UserEntityFactory), false);
				AddNavigatorMetaData<UserEntity, EntityCollection<PortofolioEntity>>("Portofolios", a => a._portofolios, (a, b) => a._portofolios = b, a => a.Portofolios, () => new UserRelations().PortofolioEntityUsingUserId, typeof(PortofolioEntity), (int)Dummy.EntityType.PortofolioEntity);
				AddNavigatorMetaData<UserEntity, EntityCollection<SummaryEntity>>("Summaries", a => a._summaries, (a, b) => a._summaries = b, a => a.Summaries, () => new UserRelations().SummaryEntityUsingUserId, typeof(SummaryEntity), (int)Dummy.EntityType.SummaryEntity);
				AddNavigatorMetaData<UserEntity, EntityCollection<TransactionEntity>>("Transactions", a => a._transactions, (a, b) => a._transactions = b, a => a.Transactions, () => new UserRelations().TransactionEntityUsingUserId, typeof(TransactionEntity), (int)Dummy.EntityType.TransactionEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static UserEntity()
		{
		}

		/// <summary> CTor</summary>
		public UserEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public UserEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this UserEntity</param>
		public UserEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="userId">PK value for User which data should be fetched into this User object</param>
		public UserEntity(System.Int32 userId) : this(userId, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="userId">PK value for User which data should be fetched into this User object</param>
		/// <param name="validator">The custom validator object for this UserEntity</param>
		public UserEntity(System.Int32 userId, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.UserId = userId;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected UserEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Portofolio' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoPortofolios() { return CreateRelationInfoForNavigator("Portofolios"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Summary' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoSummaries() { return CreateRelationInfoForNavigator("Summaries"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Transaction' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoTransactions() { return CreateRelationInfoForNavigator("Transactions"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this UserEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static UserRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Portofolio' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathPortofolios { get { return _staticMetaData.GetPrefetchPathElement("Portofolios", CommonEntityBase.CreateEntityCollection<PortofolioEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Summary' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathSummaries { get { return _staticMetaData.GetPrefetchPathElement("Summaries", CommonEntityBase.CreateEntityCollection<SummaryEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Transaction' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathTransactions { get { return _staticMetaData.GetPrefetchPathElement("Transactions", CommonEntityBase.CreateEntityCollection<TransactionEntity>()); } }

		/// <summary>The CreateDate property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."CreateDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime2, 7, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime CreateDate
		{
			get { return (System.DateTime)GetValue((int)UserFieldIndex.CreateDate, true); }
			set	{ SetValue((int)UserFieldIndex.CreateDate, value); }
		}

		/// <summary>The Name property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."Name".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 200.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Name
		{
			get { return (System.String)GetValue((int)UserFieldIndex.Name, true); }
			set	{ SetValue((int)UserFieldIndex.Name, value); }
		}

		/// <summary>The Password property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."Password".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 200.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Password
		{
			get { return (System.String)GetValue((int)UserFieldIndex.Password, true); }
			set	{ SetValue((int)UserFieldIndex.Password, value); }
		}

		/// <summary>The UpdateDate property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."UpdateDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime2, 7, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime UpdateDate
		{
			get { return (System.DateTime)GetValue((int)UserFieldIndex.UpdateDate, true); }
			set	{ SetValue((int)UserFieldIndex.UpdateDate, value); }
		}

		/// <summary>The UserId property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."UserId".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 UserId
		{
			get { return (System.Int32)GetValue((int)UserFieldIndex.UserId, true); }
			set { SetValue((int)UserFieldIndex.UserId, value); }		}

		/// <summary>The UserName property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."UserName".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 200.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String UserName
		{
			get { return (System.String)GetValue((int)UserFieldIndex.UserName, true); }
			set	{ SetValue((int)UserFieldIndex.UserName, value); }
		}

		/// <summary>The Version property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."Version".<br/>Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int64 Version
		{
			get { return (System.Int64)GetValue((int)UserFieldIndex.Version, true); }
			set	{ SetValue((int)UserFieldIndex.Version, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'PortofolioEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(PortofolioEntity))]
		public virtual EntityCollection<PortofolioEntity> Portofolios { get { return GetOrCreateEntityCollection<PortofolioEntity, PortofolioEntityFactory>("User", true, false, ref _portofolios); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'SummaryEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(SummaryEntity))]
		public virtual EntityCollection<SummaryEntity> Summaries { get { return GetOrCreateEntityCollection<SummaryEntity, SummaryEntityFactory>("User", true, false, ref _summaries); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'TransactionEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(TransactionEntity))]
		public virtual EntityCollection<TransactionEntity> Transactions { get { return GetOrCreateEntityCollection<TransactionEntity, TransactionEntityFactory>("User", true, false, ref _transactions); } }

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace Dummy
{
	public enum UserFieldIndex
	{
		///<summary>CreateDate. </summary>
		CreateDate,
		///<summary>Name. </summary>
		Name,
		///<summary>Password. </summary>
		Password,
		///<summary>UpdateDate. </summary>
		UpdateDate,
		///<summary>UserId. </summary>
		UserId,
		///<summary>UserName. </summary>
		UserName,
		///<summary>Version. </summary>
		Version,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace Dummy.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: User. </summary>
	public partial class UserRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between UserEntity and PortofolioEntity over the 1:n relation they have, using the relation between the fields: User.UserId - Portofolio.UserId</summary>
		public virtual IEntityRelation PortofolioEntityUsingUserId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Portofolios", true, new[] { UserFields.UserId, PortofolioFields.UserId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between UserEntity and SummaryEntity over the 1:n relation they have, using the relation between the fields: User.UserId - Summary.UserId</summary>
		public virtual IEntityRelation SummaryEntityUsingUserId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Summaries", true, new[] { UserFields.UserId, SummaryFields.UserId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between UserEntity and TransactionEntity over the 1:n relation they have, using the relation between the fields: User.UserId - Transaction.UserId</summary>
		public virtual IEntityRelation TransactionEntityUsingUserId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Transactions", true, new[] { UserFields.UserId, TransactionFields.UserId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticUserRelations
	{
		internal static readonly IEntityRelation PortofolioEntityUsingUserIdStatic = new UserRelations().PortofolioEntityUsingUserId;
		internal static readonly IEntityRelation SummaryEntityUsingUserIdStatic = new UserRelations().SummaryEntityUsingUserId;
		internal static readonly IEntityRelation TransactionEntityUsingUserIdStatic = new UserRelations().TransactionEntityUsingUserId;

		/// <summary>CTor</summary>
		static StaticUserRelations() { }
	}
}
