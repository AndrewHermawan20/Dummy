//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using Dummy.HelperClasses;
using Dummy.FactoryClasses;
using Dummy.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace Dummy.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'Transaction'.<br/><br/></summary>
	[Serializable]
	public partial class TransactionEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private EntityCollection<TransactionEntity> _transactions;
		private EntityCollection<TransactionEntity> _transactions1;
		private StockEntity _stock;
		private TransactionEntity _transaction;
		private TransactionEntity _transaction1;
		private TransactionStatusEntity _transactionStatus;
		private TransactionTypeEntity _transactionType;
		private UserEntity _user;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static TransactionEntityStaticMetaData _staticMetaData = new TransactionEntityStaticMetaData();
		private static TransactionRelations _relationsFactory = new TransactionRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Stock</summary>
			public static readonly string Stock = "Stock";
			/// <summary>Member name Transaction</summary>
			public static readonly string Transaction = "Transaction";
			/// <summary>Member name Transaction1</summary>
			public static readonly string Transaction1 = "Transaction1";
			/// <summary>Member name TransactionStatus</summary>
			public static readonly string TransactionStatus = "TransactionStatus";
			/// <summary>Member name TransactionType</summary>
			public static readonly string TransactionType = "TransactionType";
			/// <summary>Member name User</summary>
			public static readonly string User = "User";
			/// <summary>Member name Transactions</summary>
			public static readonly string Transactions = "Transactions";
			/// <summary>Member name Transactions1</summary>
			public static readonly string Transactions1 = "Transactions1";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class TransactionEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public TransactionEntityStaticMetaData()
			{
				SetEntityCoreInfo("TransactionEntity", InheritanceHierarchyType.None, false, (int)Dummy.EntityType.TransactionEntity, typeof(TransactionEntity), typeof(TransactionEntityFactory), false);
				AddNavigatorMetaData<TransactionEntity, EntityCollection<TransactionEntity>>("Transactions", a => a._transactions, (a, b) => a._transactions = b, a => a.Transactions, () => new TransactionRelations().TransactionEntityUsingBuyTransactionId, typeof(TransactionEntity), (int)Dummy.EntityType.TransactionEntity);
				AddNavigatorMetaData<TransactionEntity, EntityCollection<TransactionEntity>>("Transactions1", a => a._transactions1, (a, b) => a._transactions1 = b, a => a.Transactions1, () => new TransactionRelations().TransactionEntityUsingSellTransactionId, typeof(TransactionEntity), (int)Dummy.EntityType.TransactionEntity);
				AddNavigatorMetaData<TransactionEntity, StockEntity>("Stock", "Transactions", (a, b) => a._stock = b, a => a._stock, (a, b) => a.Stock = b, Dummy.RelationClasses.StaticTransactionRelations.StockEntityUsingStockIdStatic, ()=>new TransactionRelations().StockEntityUsingStockId, null, new int[] { (int)TransactionFieldIndex.StockId }, null, true, (int)Dummy.EntityType.StockEntity);
				AddNavigatorMetaData<TransactionEntity, TransactionEntity>("Transaction", "Transactions", (a, b) => a._transaction = b, a => a._transaction, (a, b) => a.Transaction = b, Dummy.RelationClasses.StaticTransactionRelations.TransactionEntityUsingTransactionIdBuyTransactionIdStatic, ()=>new TransactionRelations().TransactionEntityUsingTransactionIdBuyTransactionId, null, new int[] { (int)TransactionFieldIndex.BuyTransactionId }, null, true, (int)Dummy.EntityType.TransactionEntity);
				AddNavigatorMetaData<TransactionEntity, TransactionEntity>("Transaction1", "Transactions1", (a, b) => a._transaction1 = b, a => a._transaction1, (a, b) => a.Transaction1 = b, Dummy.RelationClasses.StaticTransactionRelations.TransactionEntityUsingTransactionIdSellTransactionIdStatic, ()=>new TransactionRelations().TransactionEntityUsingTransactionIdSellTransactionId, null, new int[] { (int)TransactionFieldIndex.SellTransactionId }, null, true, (int)Dummy.EntityType.TransactionEntity);
				AddNavigatorMetaData<TransactionEntity, TransactionStatusEntity>("TransactionStatus", "Transactions", (a, b) => a._transactionStatus = b, a => a._transactionStatus, (a, b) => a.TransactionStatus = b, Dummy.RelationClasses.StaticTransactionRelations.TransactionStatusEntityUsingTransactionStatusIdStatic, ()=>new TransactionRelations().TransactionStatusEntityUsingTransactionStatusId, null, new int[] { (int)TransactionFieldIndex.TransactionStatusId }, null, true, (int)Dummy.EntityType.TransactionStatusEntity);
				AddNavigatorMetaData<TransactionEntity, TransactionTypeEntity>("TransactionType", "Transactions", (a, b) => a._transactionType = b, a => a._transactionType, (a, b) => a.TransactionType = b, Dummy.RelationClasses.StaticTransactionRelations.TransactionTypeEntityUsingTransactionTypeIdStatic, ()=>new TransactionRelations().TransactionTypeEntityUsingTransactionTypeId, null, new int[] { (int)TransactionFieldIndex.TransactionTypeId }, null, true, (int)Dummy.EntityType.TransactionTypeEntity);
				AddNavigatorMetaData<TransactionEntity, UserEntity>("User", "Transactions", (a, b) => a._user = b, a => a._user, (a, b) => a.User = b, Dummy.RelationClasses.StaticTransactionRelations.UserEntityUsingUserIdStatic, ()=>new TransactionRelations().UserEntityUsingUserId, null, new int[] { (int)TransactionFieldIndex.UserId }, null, true, (int)Dummy.EntityType.UserEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static TransactionEntity()
		{
		}

		/// <summary> CTor</summary>
		public TransactionEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public TransactionEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this TransactionEntity</param>
		public TransactionEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="transactionId">PK value for Transaction which data should be fetched into this Transaction object</param>
		public TransactionEntity(System.Int64 transactionId) : this(transactionId, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="transactionId">PK value for Transaction which data should be fetched into this Transaction object</param>
		/// <param name="validator">The custom validator object for this TransactionEntity</param>
		public TransactionEntity(System.Int64 transactionId, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.TransactionId = transactionId;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected TransactionEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Transaction' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoTransactions() { return CreateRelationInfoForNavigator("Transactions"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Transaction' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoTransactions1() { return CreateRelationInfoForNavigator("Transactions1"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Stock' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoStock() { return CreateRelationInfoForNavigator("Stock"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Transaction' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoTransaction() { return CreateRelationInfoForNavigator("Transaction"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Transaction' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoTransaction1() { return CreateRelationInfoForNavigator("Transaction1"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'TransactionStatus' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoTransactionStatus() { return CreateRelationInfoForNavigator("TransactionStatus"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'TransactionType' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoTransactionType() { return CreateRelationInfoForNavigator("TransactionType"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'User' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoUser() { return CreateRelationInfoForNavigator("User"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this TransactionEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static TransactionRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Transaction' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathTransactions { get { return _staticMetaData.GetPrefetchPathElement("Transactions", CommonEntityBase.CreateEntityCollection<TransactionEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Transaction' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathTransactions1 { get { return _staticMetaData.GetPrefetchPathElement("Transactions1", CommonEntityBase.CreateEntityCollection<TransactionEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Stock' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathStock { get { return _staticMetaData.GetPrefetchPathElement("Stock", CommonEntityBase.CreateEntityCollection<StockEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Transaction' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathTransaction { get { return _staticMetaData.GetPrefetchPathElement("Transaction", CommonEntityBase.CreateEntityCollection<TransactionEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Transaction' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathTransaction1 { get { return _staticMetaData.GetPrefetchPathElement("Transaction1", CommonEntityBase.CreateEntityCollection<TransactionEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'TransactionStatus' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathTransactionStatus { get { return _staticMetaData.GetPrefetchPathElement("TransactionStatus", CommonEntityBase.CreateEntityCollection<TransactionStatusEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'TransactionType' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathTransactionType { get { return _staticMetaData.GetPrefetchPathElement("TransactionType", CommonEntityBase.CreateEntityCollection<TransactionTypeEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'User' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathUser { get { return _staticMetaData.GetPrefetchPathElement("User", CommonEntityBase.CreateEntityCollection<UserEntity>()); } }

		/// <summary>The BuyTransactionId property of the Entity Transaction<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Transaction"."BuyTransactionId".<br/>Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int64> BuyTransactionId
		{
			get { return (Nullable<System.Int64>)GetValue((int)TransactionFieldIndex.BuyTransactionId, false); }
			set	{ SetValue((int)TransactionFieldIndex.BuyTransactionId, value); }
		}

		/// <summary>The CancelDate property of the Entity Transaction<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Transaction"."CancelDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime2, 7, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> CancelDate
		{
			get { return (Nullable<System.DateTime>)GetValue((int)TransactionFieldIndex.CancelDate, false); }
			set	{ SetValue((int)TransactionFieldIndex.CancelDate, value); }
		}

		/// <summary>The CreateDate property of the Entity Transaction<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Transaction"."CreateDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime2, 7, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime CreateDate
		{
			get { return (System.DateTime)GetValue((int)TransactionFieldIndex.CreateDate, true); }
			set	{ SetValue((int)TransactionFieldIndex.CreateDate, value); }
		}

		/// <summary>The GrossAmount property of the Entity Transaction<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Transaction"."GrossAmount".<br/>Table field type characteristics (type, precision, scale, length): NChar, 0, 0, 10.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String GrossAmount
		{
			get { return (System.String)GetValue((int)TransactionFieldIndex.GrossAmount, true); }
			set	{ SetValue((int)TransactionFieldIndex.GrossAmount, value); }
		}

		/// <summary>The IsSellFirst property of the Entity Transaction<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Transaction"."IsSellFirst".<br/>Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Boolean IsSellFirst
		{
			get { return (System.Boolean)GetValue((int)TransactionFieldIndex.IsSellFirst, true); }
			set	{ SetValue((int)TransactionFieldIndex.IsSellFirst, value); }
		}

		/// <summary>The Lot property of the Entity Transaction<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Transaction"."Lot".<br/>Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int64 Lot
		{
			get { return (System.Int64)GetValue((int)TransactionFieldIndex.Lot, true); }
			set	{ SetValue((int)TransactionFieldIndex.Lot, value); }
		}

		/// <summary>The NetAmount property of the Entity Transaction<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Transaction"."NetAmount".<br/>Table field type characteristics (type, precision, scale, length): Money, 19, 4, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Decimal NetAmount
		{
			get { return (System.Decimal)GetValue((int)TransactionFieldIndex.NetAmount, true); }
			set	{ SetValue((int)TransactionFieldIndex.NetAmount, value); }
		}

		/// <summary>The Price property of the Entity Transaction<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Transaction"."Price".<br/>Table field type characteristics (type, precision, scale, length): Money, 19, 4, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Decimal Price
		{
			get { return (System.Decimal)GetValue((int)TransactionFieldIndex.Price, true); }
			set	{ SetValue((int)TransactionFieldIndex.Price, value); }
		}

		/// <summary>The SellTransactionId property of the Entity Transaction<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Transaction"."SellTransactionId".<br/>Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int64> SellTransactionId
		{
			get { return (Nullable<System.Int64>)GetValue((int)TransactionFieldIndex.SellTransactionId, false); }
			set	{ SetValue((int)TransactionFieldIndex.SellTransactionId, value); }
		}

		/// <summary>The Shared property of the Entity Transaction<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Transaction"."Shared".<br/>Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int64 Shared
		{
			get { return (System.Int64)GetValue((int)TransactionFieldIndex.Shared, true); }
			set	{ SetValue((int)TransactionFieldIndex.Shared, value); }
		}

		/// <summary>The StockId property of the Entity Transaction<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Transaction"."StockId".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 StockId
		{
			get { return (System.Int32)GetValue((int)TransactionFieldIndex.StockId, true); }
			set	{ SetValue((int)TransactionFieldIndex.StockId, value); }
		}

		/// <summary>The TransactionDate property of the Entity Transaction<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Transaction"."TransactionDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime2, 7, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime TransactionDate
		{
			get { return (System.DateTime)GetValue((int)TransactionFieldIndex.TransactionDate, true); }
			set	{ SetValue((int)TransactionFieldIndex.TransactionDate, value); }
		}

		/// <summary>The TransactionFee property of the Entity Transaction<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Transaction"."TransactionFee".<br/>Table field type characteristics (type, precision, scale, length): Money, 19, 4, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Decimal TransactionFee
		{
			get { return (System.Decimal)GetValue((int)TransactionFieldIndex.TransactionFee, true); }
			set	{ SetValue((int)TransactionFieldIndex.TransactionFee, value); }
		}

		/// <summary>The TransactionId property of the Entity Transaction<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Transaction"."TransactionId".<br/>Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int64 TransactionId
		{
			get { return (System.Int64)GetValue((int)TransactionFieldIndex.TransactionId, true); }
			set { SetValue((int)TransactionFieldIndex.TransactionId, value); }		}

		/// <summary>The TransactionStatusId property of the Entity Transaction<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Transaction"."TransactionStatusId".<br/>Table field type characteristics (type, precision, scale, length): SmallInt, 5, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int16 TransactionStatusId
		{
			get { return (System.Int16)GetValue((int)TransactionFieldIndex.TransactionStatusId, true); }
			set	{ SetValue((int)TransactionFieldIndex.TransactionStatusId, value); }
		}

		/// <summary>The TransactionTypeId property of the Entity Transaction<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Transaction"."TransactionTypeId".<br/>Table field type characteristics (type, precision, scale, length): SmallInt, 5, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int16 TransactionTypeId
		{
			get { return (System.Int16)GetValue((int)TransactionFieldIndex.TransactionTypeId, true); }
			set	{ SetValue((int)TransactionFieldIndex.TransactionTypeId, value); }
		}

		/// <summary>The UpdateDate property of the Entity Transaction<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Transaction"."UpdateDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime2, 7, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime UpdateDate
		{
			get { return (System.DateTime)GetValue((int)TransactionFieldIndex.UpdateDate, true); }
			set	{ SetValue((int)TransactionFieldIndex.UpdateDate, value); }
		}

		/// <summary>The UserId property of the Entity Transaction<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Transaction"."UserId".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 UserId
		{
			get { return (System.Int32)GetValue((int)TransactionFieldIndex.UserId, true); }
			set	{ SetValue((int)TransactionFieldIndex.UserId, value); }
		}

		/// <summary>The Version property of the Entity Transaction<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Transaction"."Version".<br/>Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int64 Version
		{
			get { return (System.Int64)GetValue((int)TransactionFieldIndex.Version, true); }
			set	{ SetValue((int)TransactionFieldIndex.Version, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'TransactionEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(TransactionEntity))]
		public virtual EntityCollection<TransactionEntity> Transactions { get { return GetOrCreateEntityCollection<TransactionEntity, TransactionEntityFactory>("Transaction", true, false, ref _transactions); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'TransactionEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(TransactionEntity))]
		public virtual EntityCollection<TransactionEntity> Transactions1 { get { return GetOrCreateEntityCollection<TransactionEntity, TransactionEntityFactory>("Transaction1", true, false, ref _transactions1); } }

		/// <summary>Gets / sets related entity of type 'StockEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual StockEntity Stock
		{
			get { return _stock; }
			set { SetSingleRelatedEntityNavigator(value, "Stock"); }
		}

		/// <summary>Gets / sets related entity of type 'TransactionEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual TransactionEntity Transaction
		{
			get { return _transaction; }
			set { SetSingleRelatedEntityNavigator(value, "Transaction"); }
		}

		/// <summary>Gets / sets related entity of type 'TransactionEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual TransactionEntity Transaction1
		{
			get { return _transaction1; }
			set { SetSingleRelatedEntityNavigator(value, "Transaction1"); }
		}

		/// <summary>Gets / sets related entity of type 'TransactionStatusEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual TransactionStatusEntity TransactionStatus
		{
			get { return _transactionStatus; }
			set { SetSingleRelatedEntityNavigator(value, "TransactionStatus"); }
		}

		/// <summary>Gets / sets related entity of type 'TransactionTypeEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual TransactionTypeEntity TransactionType
		{
			get { return _transactionType; }
			set { SetSingleRelatedEntityNavigator(value, "TransactionType"); }
		}

		/// <summary>Gets / sets related entity of type 'UserEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual UserEntity User
		{
			get { return _user; }
			set { SetSingleRelatedEntityNavigator(value, "User"); }
		}

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace Dummy
{
	public enum TransactionFieldIndex
	{
		///<summary>BuyTransactionId. </summary>
		BuyTransactionId,
		///<summary>CancelDate. </summary>
		CancelDate,
		///<summary>CreateDate. </summary>
		CreateDate,
		///<summary>GrossAmount. </summary>
		GrossAmount,
		///<summary>IsSellFirst. </summary>
		IsSellFirst,
		///<summary>Lot. </summary>
		Lot,
		///<summary>NetAmount. </summary>
		NetAmount,
		///<summary>Price. </summary>
		Price,
		///<summary>SellTransactionId. </summary>
		SellTransactionId,
		///<summary>Shared. </summary>
		Shared,
		///<summary>StockId. </summary>
		StockId,
		///<summary>TransactionDate. </summary>
		TransactionDate,
		///<summary>TransactionFee. </summary>
		TransactionFee,
		///<summary>TransactionId. </summary>
		TransactionId,
		///<summary>TransactionStatusId. </summary>
		TransactionStatusId,
		///<summary>TransactionTypeId. </summary>
		TransactionTypeId,
		///<summary>UpdateDate. </summary>
		UpdateDate,
		///<summary>UserId. </summary>
		UserId,
		///<summary>Version. </summary>
		Version,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace Dummy.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: Transaction. </summary>
	public partial class TransactionRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between TransactionEntity and TransactionEntity over the 1:n relation they have, using the relation between the fields: Transaction.TransactionId - Transaction.BuyTransactionId</summary>
		public virtual IEntityRelation TransactionEntityUsingBuyTransactionId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Transactions", true, new[] { TransactionFields.TransactionId, TransactionFields.BuyTransactionId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between TransactionEntity and TransactionEntity over the 1:n relation they have, using the relation between the fields: Transaction.TransactionId - Transaction.SellTransactionId</summary>
		public virtual IEntityRelation TransactionEntityUsingSellTransactionId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Transactions1", true, new[] { TransactionFields.TransactionId, TransactionFields.SellTransactionId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between TransactionEntity and StockEntity over the m:1 relation they have, using the relation between the fields: Transaction.StockId - Stock.StockId</summary>
		public virtual IEntityRelation StockEntityUsingStockId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Stock", false, new[] { StockFields.StockId, TransactionFields.StockId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between TransactionEntity and TransactionEntity over the m:1 relation they have, using the relation between the fields: Transaction.BuyTransactionId - Transaction.TransactionId</summary>
		public virtual IEntityRelation TransactionEntityUsingTransactionIdBuyTransactionId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Transaction", false, new[] { TransactionFields.TransactionId, TransactionFields.BuyTransactionId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between TransactionEntity and TransactionEntity over the m:1 relation they have, using the relation between the fields: Transaction.SellTransactionId - Transaction.TransactionId</summary>
		public virtual IEntityRelation TransactionEntityUsingTransactionIdSellTransactionId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Transaction1", false, new[] { TransactionFields.TransactionId, TransactionFields.SellTransactionId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between TransactionEntity and TransactionStatusEntity over the m:1 relation they have, using the relation between the fields: Transaction.TransactionStatusId - TransactionStatus.TransactionStatusId</summary>
		public virtual IEntityRelation TransactionStatusEntityUsingTransactionStatusId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "TransactionStatus", false, new[] { TransactionStatusFields.TransactionStatusId, TransactionFields.TransactionStatusId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between TransactionEntity and TransactionTypeEntity over the m:1 relation they have, using the relation between the fields: Transaction.TransactionTypeId - TransactionType.TransactionTypeId</summary>
		public virtual IEntityRelation TransactionTypeEntityUsingTransactionTypeId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "TransactionType", false, new[] { TransactionTypeFields.TransactionTypeId, TransactionFields.TransactionTypeId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between TransactionEntity and UserEntity over the m:1 relation they have, using the relation between the fields: Transaction.UserId - User.UserId</summary>
		public virtual IEntityRelation UserEntityUsingUserId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "User", false, new[] { UserFields.UserId, TransactionFields.UserId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticTransactionRelations
	{
		internal static readonly IEntityRelation TransactionEntityUsingBuyTransactionIdStatic = new TransactionRelations().TransactionEntityUsingBuyTransactionId;
		internal static readonly IEntityRelation TransactionEntityUsingSellTransactionIdStatic = new TransactionRelations().TransactionEntityUsingSellTransactionId;
		internal static readonly IEntityRelation StockEntityUsingStockIdStatic = new TransactionRelations().StockEntityUsingStockId;
		internal static readonly IEntityRelation TransactionEntityUsingTransactionIdBuyTransactionIdStatic = new TransactionRelations().TransactionEntityUsingTransactionIdBuyTransactionId;
		internal static readonly IEntityRelation TransactionEntityUsingTransactionIdSellTransactionIdStatic = new TransactionRelations().TransactionEntityUsingTransactionIdSellTransactionId;
		internal static readonly IEntityRelation TransactionStatusEntityUsingTransactionStatusIdStatic = new TransactionRelations().TransactionStatusEntityUsingTransactionStatusId;
		internal static readonly IEntityRelation TransactionTypeEntityUsingTransactionTypeIdStatic = new TransactionRelations().TransactionTypeEntityUsingTransactionTypeId;
		internal static readonly IEntityRelation UserEntityUsingUserIdStatic = new TransactionRelations().UserEntityUsingUserId;

		/// <summary>CTor</summary>
		static StaticTransactionRelations() { }
	}
}
