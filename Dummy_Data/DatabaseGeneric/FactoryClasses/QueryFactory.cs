//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
////////////////////////////////////////////////////////////// 
using System;
using System.Linq;
using Dummy.EntityClasses;
using Dummy.HelperClasses;
using SD.LLBLGen.Pro.ORMSupportClasses;
using SD.LLBLGen.Pro.QuerySpec.AdapterSpecific;
using SD.LLBLGen.Pro.QuerySpec;

namespace Dummy.FactoryClasses
{
	/// <summary>Factory class to produce DynamicQuery instances and EntityQuery instances</summary>
	public partial class QueryFactory : QueryFactoryBase2
	{
		/// <summary>Creates and returns a new EntityQuery for the Configuration entity</summary>
		public EntityQuery<ConfigurationEntity> Configuration { get { return Create<ConfigurationEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the OrderHistory entity</summary>
		public EntityQuery<OrderHistoryEntity> OrderHistory { get { return Create<OrderHistoryEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the OrderType entity</summary>
		public EntityQuery<OrderTypeEntity> OrderType { get { return Create<OrderTypeEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the Portofolio entity</summary>
		public EntityQuery<PortofolioEntity> Portofolio { get { return Create<PortofolioEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the PortofolioItem entity</summary>
		public EntityQuery<PortofolioItemEntity> PortofolioItem { get { return Create<PortofolioItemEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the Stock entity</summary>
		public EntityQuery<StockEntity> Stock { get { return Create<StockEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the StockSector entity</summary>
		public EntityQuery<StockSectorEntity> StockSector { get { return Create<StockSectorEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the Summary entity</summary>
		public EntityQuery<SummaryEntity> Summary { get { return Create<SummaryEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the Transaction entity</summary>
		public EntityQuery<TransactionEntity> Transaction { get { return Create<TransactionEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the TransactionStatus entity</summary>
		public EntityQuery<TransactionStatusEntity> TransactionStatus { get { return Create<TransactionStatusEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the TransactionType entity</summary>
		public EntityQuery<TransactionTypeEntity> TransactionType { get { return Create<TransactionTypeEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the User entity</summary>
		public EntityQuery<UserEntity> User { get { return Create<UserEntity>(); } }

		/// <inheritdoc/>
		protected override IElementCreatorCore CreateElementCreator() { return new ElementCreator(); }
 
		/// <summary>Gets the query to fetch the typed list Dbo.StockTypedList</summary>
		/// <param name="root">Optional. If specified (not null) it's used as the root of the query to fetch the typed list, otherwise a new EntityQuery(Of StockEntity) is used</param>
		/// <returns>Dynamic Query which fetches <see cref="Dummy.TypedListClasses.StockTypedListRow"/> instances </returns>
		public DynamicQuery<Dummy.TypedListClasses.StockTypedListRow> GetStockTypedListTypedList(EntityQuery<StockEntity> root=null)
		{
			var rootOfQuery = root ?? this.Stock;
			return this.Create()
						.Select(() => new Dummy.TypedListClasses.StockTypedListRow()
								{
									StockId = StockFields.StockId.ToValue<System.Int32>(),
									Code = StockFields.Code.ToValue<System.String>(),
									Name = StockFields.Name.ToValue<System.String>(),
									StockSectorId = StockFields.StockSectorId.ToValue<System.Int32>(),
									Code1 = StockSectorFields.Code.As("Code1").ToValue<System.String>(),
									Name1 = StockSectorFields.Name.As("Name1").ToValue<System.String>()
								})
						.From(rootOfQuery
								.InnerJoin(this.StockSector).On(StockFields.StockSectorId.Equal(StockSectorFields.StockSectorId)));
		}

	}
}